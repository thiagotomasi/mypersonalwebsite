{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"scripts.js","sourcesContent":["/* lazyload.js (c) Lorenzo Giuliani\n * MIT License (http://www.opensource.org/licenses/mit-license.html)\n *\n * expects a list of:  \n * `<img src=\"blank.gif\" data-src=\"my_image.png\" width=\"600\" height=\"400\" class=\"lazy\">`\n */\n\n!function(window){\n  var $q = function(q, res){\n        if (document.querySelectorAll) {\n          res = document.querySelectorAll(q);\n        } else {\n          var d=document\n            , a=d.styleSheets[0] || d.createStyleSheet();\n          a.addRule(q,'f:b');\n          for(var l=d.all,b=0,c=[],f=l.length;b<f;b++)\n            l[b].currentStyle.f && c.push(l[b]);\n\n          a.removeRule(0);\n          res = c;\n        }\n        return res;\n      }\n    , addEventListener = function(evt, fn){\n        window.addEventListener\n          ? this.addEventListener(evt, fn, false)\n          : (window.attachEvent)\n            ? this.attachEvent('on' + evt, fn)\n            : this['on' + evt] = fn;\n      }\n    , _has = function(obj, key) {\n        return Object.prototype.hasOwnProperty.call(obj, key);\n      }\n    ;\n\n  function loadImage (el, fn) {\n    var img = new Image()\n      , src = el.getAttribute('data-src');\n    img.onload = function() {\n      if (!! el.parent)\n        el.parent.replaceChild(img, el)\n      else\n        el.src = src;\n\n      fn? fn() : null;\n    }\n    img.src = src;\n  }\n\n  function elementInViewport(el) {\n    var rect = el.getBoundingClientRect()\n\n    return (\n       rect.top    >= 0\n    && rect.left   >= 0\n    && rect.top <= (window.innerHeight || document.documentElement.clientHeight)\n    )\n  }\n\n    var images = new Array()\n      , query = $q('img.lazy')\n      , processScroll = function(){\n          for (var i = 0; i < images.length; i++) {\n            if (elementInViewport(images[i])) {\n              loadImage(images[i], function () {\n                images.splice(i, i);\n              });\n            }\n          };\n        }\n      ;\n    // Array.prototype.slice.call is not callable under our lovely IE8 \n    for (var i = 0; i < query.length; i++) {\n      images.push(query[i]);\n    };\n\n    processScroll();\n    addEventListener('scroll',processScroll);\n\n}(this);\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  \"use strict\"\n\n  var links = document.querySelectorAll(\"a.scroll\")\n  var i = links.length\n  var root = /firefox|trident/i.test(navigator.userAgent) ? document.documentElement : document.body\n  var easeInOutCubic = function(t, b, c, d) {\n    if ((t/=d/2) < 1) return c/2*t*t*t + b\n    return c/2*((t-=2)*t*t + 2) + b\n  }\n\n  while (i--) \n    links.item(i).addEventListener(\"click\", function(e) {\n      var startTime\n      var startPos = root.scrollTop\n      var endPos = document.getElementById(/[^#]+$/.exec(this.href)[0]).getBoundingClientRect().top\n      var maxScroll = root.scrollHeight - window.innerHeight\n      var scrollEndValue = startPos + endPos < maxScroll ? endPos : maxScroll - startPos\n      var duration = 900\n      var scroll = function(timestamp) {\n        startTime = startTime || timestamp\n        var elapsed = timestamp - startTime\n        var progress = easeInOutCubic(elapsed, startPos, scrollEndValue, duration)\n        root.scrollTop = progress\n        elapsed < duration && requestAnimationFrame(scroll)\n      }   \n      requestAnimationFrame(scroll)\n      e.preventDefault()\n    }) \n})"],"sourceRoot":"/source/"}